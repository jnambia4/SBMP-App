AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole
    Runtime: nodejs10.x
    Environment:
      Variables:
        NODE_ENV: production
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,Access-Token,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  IndexUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
  LandingUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/landing.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /landing
            Method: get
  UserCreationUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/usercreation.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /usercreation
            Method: get
  MobileLoginUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/mobilelogin.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /mobilelogin
            Method: get
  MobileLogoutUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/mobilelogout.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /mobilelogout
            Method: get
  HomePageUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/homepage.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /homepage
            Method: get
  RouteSearchUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/routesearch.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /routesearch
            Method: get
  UserProfileUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/profilemgmt.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /profilemgmt
            Method: get
  SPTaggingUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/sptagging.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /sptagging
            Method: get
  DocUI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/doc.get
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /apidoc
            Method: get
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
